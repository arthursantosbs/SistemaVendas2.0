<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/sistema/Sistema.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/Sistema.java" />
              <option name="originalContent" value="package com.sistema;&#10;&#10;import com.sistema.model.Produto;&#10;import com.sistema.model.Usuario;&#10;import com.sistema.model.Administrador;&#10;import com.sistema.model.Vendedor;&#10;import com.sistema.model.Cliente;&#10;import com.sistema.service.Controlador;&#10;import com.sistema.util.Util;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class Sistema {&#10;    private static Sistema instance;&#10;    private List&lt;Usuario&gt; usuarios;&#10;    private List&lt;Produto&gt; produtosDisponiveis;&#10;    private Controlador controlador;&#10;&#10;    private Sistema() {&#10;        this.usuarios = new ArrayList&lt;&gt;();&#10;        this.produtosDisponiveis = new ArrayList&lt;&gt;();&#10;        this.controlador = Controlador.getInstance();&#10;    }&#10;&#10;    public static Sistema getInstance() {&#10;        if (instance == null) {&#10;            instance = new Sistema();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    public void cadastrarUsuario(Usuario usuario) {&#10;        // Simplificação: apenas adiciona, sem validação de ID único&#10;        usuarios.add(usuario);&#10;        System.out.println(&quot;Usuário &quot; + usuario.getNome() + &quot; cadastrado com sucesso.&quot;);&#10;    }&#10;&#10;    public Usuario realizarLogin(String email, String senha) {&#10;        Optional&lt;Usuario&gt; usuarioLogado = usuarios.stream()&#10;                .filter(u -&gt; u.getEmail().equals(email) &amp;&amp; u.getSenha().equals(senha))&#10;                .findFirst();&#10;        if (usuarioLogado.isPresent()) {&#10;            System.out.println(&quot;Login realizado com sucesso para &quot; + usuarioLogado.get().getNome() + &quot;.&quot;);&#10;            return usuarioLogado.get();&#10;        } else {&#10;            System.out.println(&quot;Email ou senha inválidos.&quot;);&#10;            return null;&#10;        }&#10;    }&#10;&#10;    public void adicionarProdutoDisponivel(Produto produto) {&#10;        // Simplificação: apenas adiciona, sem validação de ID único&#10;        produtosDisponiveis.add(produto);&#10;        System.out.println(&quot;Produto &quot; + produto.getNome() + &quot; adicionado à lista de produtos disponíveis.&quot;);&#10;    }&#10;&#10;    public Produto buscarProdutoDisponivelPorId(String id) {&#10;        Optional&lt;Produto&gt; produtoEncontrado = produtosDisponiveis.stream()&#10;                .filter(p -&gt; p.getId().equals(id))&#10;                .findFirst();&#10;        return produtoEncontrado.orElse(null);&#10;    }&#10;&#10;    public void listarProdutosDisponiveis() {&#10;        if (produtosDisponiveis.isEmpty()) {&#10;            System.out.println(&quot;Nenhum produto disponível no sistema.&quot;);&#10;            return;&#10;        }&#10;        System.out.println(&quot;\n--- Produtos Disponíveis no Sistema ---&quot;);&#10;        for (Produto produto : produtosDisponiveis) {&#10;            produto.exibirDetalhes();&#10;            System.out.println(&quot;----------------------------------------&quot;);&#10;        }&#10;    }&#10;&#10;    public Controlador getControlador() {&#10;        return controlador;&#10;    }&#10;&#10;    public List&lt;Usuario&gt; getUsuarios() {&#10;        return usuarios;&#10;    }&#10;&#10;    public List&lt;Produto&gt; getProdutosDisponiveis() {&#10;        return produtosDisponiveis;&#10;    }&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="// Classe principal do sistema, responsável por gerenciar usuários e produtos&#10;package com.sistema;&#10;&#10;import com.sistema.model.Produto;&#10;import com.sistema.model.Usuario;&#10;import com.sistema.model.Administrador;&#10;import com.sistema.model.Vendedor;&#10;import com.sistema.model.Cliente;&#10;import com.sistema.service.Controlador;&#10;import com.sistema.util.Util;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class Sistema {&#10;    // Instância única da classe (padrão Singleton)&#10;    private static Sistema instance;&#10;    // Lista que armazena todos os usuários cadastrados&#10;    private List&lt;Usuario&gt; usuarios;&#10;    // Lista que armazena todos os produtos disponíveis&#10;    private List&lt;Produto&gt; produtosDisponiveis;&#10;    // Referência ao controlador do sistema&#10;    private Controlador controlador;&#10;&#10;    // Construtor privado para garantir o padrão Singleton&#10;    private Sistema() {&#10;        this.usuarios = new ArrayList&lt;&gt;(); // Inicializa a lista de usuários&#10;        this.produtosDisponiveis = new ArrayList&lt;&gt;(); // Inicializa a lista de produtos&#10;        this.controlador = Controlador.getInstance(); // Obtém a instância do controlador&#10;    }&#10;&#10;    // Método estático para obter a instância única do sistema&#10;    public static Sistema getInstance() {&#10;        if (instance == null) {&#10;            instance = new Sistema(); // Cria a instância se ainda não existe&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    // Método para cadastrar um novo usuário no sistema&#10;    public void cadastrarUsuario(Usuario usuario) {&#10;        // Simplificação: apenas adiciona, sem validação de ID único&#10;        usuarios.add(usuario);&#10;        System.out.println(&quot;Usuário &quot; + usuario.getNome() + &quot; cadastrado com sucesso.&quot;);&#10;    }&#10;&#10;    // Método para realizar login de um usuário&#10;    public Usuario realizarLogin(String email, String senha) {&#10;        // Busca o usuário na lista pelo email e senha&#10;        Optional&lt;Usuario&gt; usuarioLogado = usuarios.stream()&#10;                .filter(u -&gt; u.getEmail().equals(email) &amp;&amp; u.getSenha().equals(senha))&#10;                .findFirst();&#10;        if (usuarioLogado.isPresent()) {&#10;            System.out.println(&quot;Login realizado com sucesso para &quot; + usuarioLogado.get().getNome() + &quot;.&quot;);&#10;            return usuarioLogado.get(); // Retorna o usuário logado&#10;        } else {&#10;            System.out.println(&quot;Email ou senha inválidos.&quot;);&#10;            return null; // Retorna null se não encontrar&#10;        }&#10;    }&#10;&#10;    // Método para adicionar um produto à lista de disponíveis&#10;    public void adicionarProdutoDisponivel(Produto produto) {&#10;        // Simplificação: apenas adiciona, sem validação de ID único&#10;        produtosDisponiveis.add(produto);&#10;        System.out.println(&quot;Produto &quot; + produto.getNome() + &quot; adicionado à lista de produtos disponíveis.&quot;);&#10;    }&#10;&#10;    // Método para buscar um produto disponível pelo ID&#10;    public Produto buscarProdutoDisponivelPorId(String id) {&#10;        Optional&lt;Produto&gt; produtoEncontrado = produtosDisponiveis.stream()&#10;                .filter(p -&gt; p.getId().equals(id))&#10;                .findFirst();&#10;        return produtoEncontrado.orElse(null); // Retorna o produto ou null se não encontrar&#10;    }&#10;&#10;    // Método para listar todos os produtos disponíveis&#10;    public void listarProdutosDisponiveis() {&#10;        if (produtosDisponiveis.isEmpty()) {&#10;            System.out.println(&quot;Nenhum produto disponível no sistema.&quot;);&#10;            return;&#10;        }&#10;        System.out.println(&quot;\n--- Produtos Disponíveis no Sistema ---&quot;);&#10;        for (Produto produto : produtosDisponiveis) {&#10;            produto.exibirDetalhes(); // Exibe os detalhes de cada produto&#10;            System.out.println(&quot;----------------------------------------&quot;);&#10;        }&#10;    }&#10;&#10;    // Métodos getters para acessar os atributos privados&#10;    public Controlador getControlador() {&#10;        return controlador;&#10;    }&#10;&#10;    public List&lt;Usuario&gt; getUsuarios() {&#10;        return usuarios;&#10;    }&#10;&#10;    public List&lt;Produto&gt; getProdutosDisponiveis() {&#10;        return produtosDisponiveis;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/model/Administrador.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/model/Administrador.java" />
              <option name="originalContent" value="package com.sistema.model;&#10;&#10;public class Administrador extends Usuario {&#10;    private int nivelAcesso;&#10;    private String departamento;&#10;&#10;    public Administrador(String id, String nome, String email, String senha, int nivelAcesso, String departamento) {&#10;        super(id, nome, email, senha);&#10;        this.nivelAcesso = nivelAcesso;&#10;        this.departamento = departamento;&#10;    }&#10;&#10;    public int getNivelAcesso() {&#10;        return nivelAcesso;&#10;    }&#10;&#10;    public String getDepartamento() {&#10;        return departamento;&#10;    }&#10;&#10;    public void setNivelAcesso(int nivelAcesso) {&#10;        this.nivelAcesso = nivelAcesso;&#10;    }&#10;&#10;    public void setDepartamento(String departamento) {&#10;        this.departamento = departamento;&#10;    }&#10;&#10;    public boolean temPermissao(int nivelRequerido) {&#10;        return this.nivelAcesso &gt;= nivelRequerido;&#10;    }&#10;&#10;    @Override&#10;    public void exibirDetalhes() {&#10;        System.out.println(&quot;Administrador: &quot; + getNome());&#10;        System.out.println(&quot;Email: &quot; + getEmail());&#10;        System.out.println(&quot;Nível de Acesso: &quot; + nivelAcesso);&#10;        System.out.println(&quot;Departamento: &quot; + departamento);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Classe Administrador: representa um administrador do sistema, herda de Usuario&#10;package com.sistema.model;&#10;&#10;// Aqui estamos criando uma classe chamada Administrador, que representa um usuário com poderes administrativos.&#10;// Ela herda de Usuario, então aproveita todos os atributos e métodos da classe base.&#10;public class Administrador extends Usuario {&#10;    // Nível de acesso do administrador (quanto maior, mais permissões)&#10;    private int nivelAcesso;&#10;    // Departamento ao qual o administrador pertence&#10;    private String departamento;&#10;&#10;    // Construtor: inicializa os dados do administrador&#10;    public Administrador(String id, String nome, String email, String senha, int nivelAcesso, String departamento) {&#10;        super(id, nome, email, senha); // Chama o construtor da classe Usuario&#10;        this.nivelAcesso = nivelAcesso;&#10;        this.departamento = departamento;&#10;    }&#10;&#10;    // Retorna o nível de acesso do administrador&#10;    public int getNivelAcesso() {&#10;        return nivelAcesso;&#10;    }&#10;&#10;    // Retorna o departamento do administrador&#10;    public String getDepartamento() {&#10;        return departamento;&#10;    }&#10;&#10;    // Permite alterar o nível de acesso do administrador&#10;    public void setNivelAcesso(int nivelAcesso) {&#10;        this.nivelAcesso = nivelAcesso;&#10;    }&#10;&#10;    // Permite alterar o departamento do administrador&#10;    public void setDepartamento(String departamento) {&#10;        this.departamento = departamento;&#10;    }&#10;&#10;    // Verifica se o administrador tem permissão para uma ação, comparando o nível de acesso&#10;    public boolean temPermissao(int nivelRequerido) {&#10;        return this.nivelAcesso &gt;= nivelRequerido;&#10;    }&#10;&#10;    // Exibe os detalhes do administrador na tela&#10;    @Override&#10;    public void exibirDetalhes() {&#10;        System.out.println(&quot;Administrador: &quot; + getNome());&#10;        System.out.println(&quot;Email: &quot; + getEmail());&#10;        System.out.println(&quot;Nível de Acesso: &quot; + nivelAcesso);&#10;        System.out.println(&quot;Departamento: &quot; + departamento);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/model/Cliente.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/model/Cliente.java" />
              <option name="originalContent" value="package com.sistema.model;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class Cliente extends Usuario {&#10;    private String cpf;&#10;    private String endereco;&#10;    private List&lt;Produto&gt; carrinho;&#10;&#10;    public Cliente(String id, String nome, String email, String senha, String cpf, String endereco) {&#10;        super(id, nome, email, senha);&#10;        this.cpf = cpf;&#10;        this.endereco = endereco;&#10;        this.carrinho = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public String getCpf() {&#10;        return cpf;&#10;    }&#10;&#10;    public String getEndereco() {&#10;        return endereco;&#10;    }&#10;&#10;    public List&lt;Produto&gt; getCarrinho() {&#10;        return carrinho;&#10;    }&#10;&#10;    public void setCpf(String cpf) {&#10;        this.cpf = cpf;&#10;    }&#10;&#10;    public void setEndereco(String endereco) {&#10;        this.endereco = endereco;&#10;    }&#10;&#10;    public void adicionarProdutoCarrinho(Produto produto) {&#10;        carrinho.add(produto);&#10;    }&#10;&#10;    public void removerProdutoCarrinho(Produto produto) {&#10;        carrinho.remove(produto);&#10;    }&#10;&#10;    public double calcularTotalCarrinho() {&#10;        double total = 0.0;&#10;        for (Produto produto : carrinho) {&#10;            total += produto.calcularPrecoFinal();&#10;        }&#10;        return total;&#10;    }&#10;&#10;    public void limparCarrinho() {&#10;        carrinho.clear();&#10;    }&#10;&#10;    @Override&#10;    public void exibirDetalhes() {&#10;        System.out.println(&quot;Cliente: &quot; + getNome());&#10;        System.out.println(&quot;Email: &quot; + getEmail());&#10;        System.out.println(&quot;CPF: &quot; + cpf);&#10;        System.out.println(&quot;Endereço: &quot; + endereco);&#10;        System.out.println(&quot;Itens no carrinho: &quot; + carrinho.size());&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.sistema.model;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;// Classe Cliente: representa um cliente do sistema, herda de Usuario&#10;// Aqui estamos criando uma classe chamada Cliente, que representa um usuário do tipo cliente.&#10;// Ela herda de Usuario, então aproveita todos os atributos e métodos da classe base.&#10;public class Cliente extends Usuario {&#10;    // CPF do cliente, usado para identificação&#10;    private String cpf;&#10;    // Endereço do cliente, usado para entregas&#10;    private String endereco;&#10;    // Carrinho de compras do cliente, armazena os produtos que ele deseja comprar&#10;    private List&lt;Produto&gt; carrinho;&#10;&#10;    // Construtor: inicializa os dados do cliente e o carrinho de compras&#10;    public Cliente(String id, String nome, String email, String senha, String cpf, String endereco) {&#10;        super(id, nome, email, senha); // Chama o construtor da classe Usuario&#10;        this.cpf = cpf;&#10;        this.endereco = endereco;&#10;        this.carrinho = new ArrayList&lt;&gt;(); // Inicializa o carrinho vazio&#10;    }&#10;&#10;    // Métodos getters: permitem acessar os dados privados do cliente&#10;    public String getCpf() {&#10;        return cpf;&#10;    }&#10;&#10;    public String getEndereco() {&#10;        return endereco;&#10;    }&#10;&#10;    public List&lt;Produto&gt; getCarrinho() {&#10;        return carrinho;&#10;    }&#10;&#10;    // Métodos setters: permitem alterar os dados privados do cliente&#10;    public void setCpf(String cpf) {&#10;        this.cpf = cpf;&#10;    }&#10;&#10;    public void setEndereco(String endereco) {&#10;        this.endereco = endereco;&#10;    }&#10;&#10;    // Adiciona um produto ao carrinho de compras&#10;    public void adicionarProdutoCarrinho(Produto produto) {&#10;        carrinho.add(produto);&#10;    }&#10;&#10;    // Remove um produto do carrinho de compras&#10;    public void removerProdutoCarrinho(Produto produto) {&#10;        carrinho.remove(produto);&#10;    }&#10;&#10;    // Calcula o valor total dos produtos no carrinho&#10;    public double calcularTotalCarrinho() {&#10;        double total = 0.0;&#10;        for (Produto produto : carrinho) {&#10;            total += produto.calcularPrecoFinal();&#10;        }&#10;        return total;&#10;    }&#10;&#10;    // Limpa o carrinho de compras, removendo todos os produtos&#10;    public void limparCarrinho() {&#10;        carrinho.clear();&#10;    }&#10;&#10;    // Exibe os detalhes do cliente e informações do carrinho&#10;    @Override&#10;    public void exibirDetalhes() {&#10;        System.out.println(&quot;Cliente: &quot; + getNome());&#10;        System.out.println(&quot;Email: &quot; + getEmail());&#10;        System.out.println(&quot;CPF: &quot; + cpf);&#10;        System.out.println(&quot;Endereço: &quot; + endereco);&#10;        System.out.println(&quot;Itens no carrinho: &quot; + carrinho.size());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/model/Esterco.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/model/Esterco.java" />
              <option name="originalContent" value="package com.sistema.model;&#10;&#10;public class Esterco extends Produto implements Vendavel, Estocavel {&#10;    private String tipoAnimal;&#10;    private String processamento;&#10;    private double nivelAcidez;&#10;    private int quantidadeEstoque;&#10;&#10;    public Esterco(String id, String nome, double preco, String descricao, String tipoAnimal, String processamento, double nivelAcidez) {&#10;        super(id, nome, preco, descricao);&#10;        this.tipoAnimal = tipoAnimal;&#10;        this.processamento = processamento;&#10;        this.nivelAcidez = nivelAcidez;&#10;        this.quantidadeEstoque = 0;&#10;    }&#10;&#10;    public String getTipoAnimal() {&#10;        return tipoAnimal;&#10;    }&#10;&#10;    public String getProcessamento() {&#10;        return processamento;&#10;    }&#10;&#10;    public double getNivelAcidez() {&#10;        return nivelAcidez;&#10;    }&#10;&#10;    public void setTipoAnimal(String tipoAnimal) {&#10;        this.tipoAnimal = tipoAnimal;&#10;    }&#10;&#10;    public void setProcessamento(String processamento) {&#10;        this.processamento = processamento;&#10;    }&#10;&#10;    public void setNivelAcidez(double nivelAcidez) {&#10;        this.nivelAcidez = nivelAcidez;&#10;    }&#10;&#10;    @Override&#10;    public void exibirDetalhes() {&#10;        System.out.println(&quot;Esterco: &quot; + getNome());&#10;        System.out.println(&quot;Tipo de Animal: &quot; + tipoAnimal);&#10;        System.out.println(&quot;Processamento: &quot; + processamento);&#10;        System.out.println(&quot;Nível de Acidez: &quot; + nivelAcidez);&#10;        System.out.println(&quot;Preço: R$ &quot; + getPreco());&#10;        System.out.println(&quot;Estoque: &quot; + quantidadeEstoque);&#10;    }&#10;&#10;    @Override&#10;    public double calcularPrecoFinal() {&#10;        if (processamento.equals(&quot;Curtido&quot;)) {&#10;            return getPreco() * 1.2;&#10;        }&#10;        return getPreco();&#10;    }&#10;&#10;    @Override&#10;    public void vender(int quantidade) {&#10;        if (podeVender(quantidade)) {&#10;            removerEstoque(quantidade);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean podeVender(int quantidade) {&#10;        return temEstoque(quantidade);&#10;    }&#10;&#10;    @Override&#10;    public double calcularValorVenda(int quantidade) {&#10;        return calcularPrecoFinal() * quantidade;&#10;    }&#10;&#10;    @Override&#10;    public void adicionarEstoque(int quantidade) {&#10;        this.quantidadeEstoque += quantidade;&#10;    }&#10;&#10;    @Override&#10;    public void removerEstoque(int quantidade) {&#10;        if (quantidade &lt;= quantidadeEstoque) {&#10;            this.quantidadeEstoque -= quantidade;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getQuantidadeEstoque() {&#10;        return quantidadeEstoque;&#10;    }&#10;&#10;    @Override&#10;    public boolean temEstoque(int quantidade) {&#10;        return quantidadeEstoque &gt;= quantidade;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Classe Esterco: representa um tipo de produto orgânico, herda de Produto e implementa Vendavel e Estocavel&#10;package com.sistema.model;&#10;&#10;// Aqui estamos criando uma classe chamada Esterco, que representa um produto orgânico no sistema.&#10;// Ela herda de Produto (ou seja, é um tipo de produto) e implementa as interfaces Vendavel e Estocavel,&#10;// o que significa que pode ser vendida e estocada.&#10;public class Esterco extends Produto implements Vendavel, Estocavel {&#10;    // Tipo de animal de onde o esterco foi originado (ex: vaca, galinha)&#10;    private String tipoAnimal;&#10;    // Tipo de processamento que o esterco passou (ex: seco, úmido)&#10;    private String processamento;&#10;    // Nível de acidez do esterco&#10;    private double nivelAcidez;&#10;    // Quantidade disponível no estoque&#10;    private int quantidadeEstoque;&#10;&#10;    // Construtor: inicializa todos os dados do esterco&#10;    public Esterco(String id, String nome, double preco, String descricao, String tipoAnimal, String processamento, double nivelAcidez) {&#10;        super(id, nome, preco, descricao); // Chama o construtor da classe Produto&#10;        this.tipoAnimal = tipoAnimal;&#10;        this.processamento = processamento;&#10;        this.nivelAcidez = nivelAcidez;&#10;        this.quantidadeEstoque = 0; // Começa com estoque zero&#10;    }&#10;&#10;    // Métodos getters: permitem acessar os dados privados do esterco&#10;    public String getTipoAnimal() {&#10;        return tipoAnimal;&#10;    }&#10;&#10;    public String getProcessamento() {&#10;        return processamento;&#10;    }&#10;&#10;    public double getNivelAcidez() {&#10;        return nivelAcidez;&#10;    }&#10;&#10;    // Métodos setters: permitem alterar os dados privados do esterco&#10;    public void setTipoAnimal(String tipoAnimal) {&#10;        this.tipoAnimal = tipoAnimal;&#10;    }&#10;&#10;    public void setProcessamento(String processamento) {&#10;        this.processamento = processamento;&#10;    }&#10;&#10;    public void setNivelAcidez(double nivelAcidez) {&#10;        this.nivelAcidez = nivelAcidez;&#10;    }&#10;&#10;    // Método sobrescrito para exibir os detalhes do esterco&#10;    @Override&#10;    public void exibirDetalhes() {&#10;        System.out.println(&quot;Esterco: &quot; + getNome());&#10;        System.out.println(&quot;Tipo de Animal: &quot; + tipoAnimal);&#10;        System.out.println(&quot;Processamento: &quot; + processamento);&#10;        System.out.println(&quot;Nível de Acidez: &quot; + nivelAcidez);&#10;        System.out.println(&quot;Preço: R$ &quot; + getPreco());&#10;        System.out.println(&quot;Estoque: &quot; + quantidadeEstoque);&#10;    }&#10;&#10;    // Cálculo do preço final do esterco, considerando o tipo de processamento&#10;    @Override&#10;    public double calcularPrecoFinal() {&#10;        if (processamento.equals(&quot;Curtido&quot;)) {&#10;            return getPreco() * 1.2;&#10;        }&#10;        return getPreco();&#10;    }&#10;&#10;    // Método para vender uma quantidade de esterco&#10;    @Override&#10;    public void vender(int quantidade) {&#10;        if (podeVender(quantidade)) {&#10;            removerEstoque(quantidade);&#10;        }&#10;    }&#10;&#10;    // Verifica se é possível vender a quantidade desejada&#10;    @Override&#10;    public boolean podeVender(int quantidade) {&#10;        return temEstoque(quantidade);&#10;    }&#10;&#10;    // Cálculo do valor total da venda&#10;    @Override&#10;    public double calcularValorVenda(int quantidade) {&#10;        return calcularPrecoFinal() * quantidade;&#10;    }&#10;&#10;    // Adiciona uma quantidade ao estoque&#10;    @Override&#10;    public void adicionarEstoque(int quantidade) {&#10;        this.quantidadeEstoque += quantidade;&#10;    }&#10;&#10;    // Remove uma quantidade do estoque&#10;    @Override&#10;    public void removerEstoque(int quantidade) {&#10;        if (quantidade &lt;= quantidadeEstoque) {&#10;            this.quantidadeEstoque -= quantidade;&#10;        }&#10;    }&#10;&#10;    // Retorna a quantidade disponível em estoque&#10;    @Override&#10;    public int getQuantidadeEstoque() {&#10;        return quantidadeEstoque;&#10;    }&#10;&#10;    // Verifica se há estoque suficiente para a quantidade desejada&#10;    @Override&#10;    public boolean temEstoque(int quantidade) {&#10;        return quantidadeEstoque &gt;= quantidade;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/model/Estocavel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/model/Estocavel.java" />
              <option name="originalContent" value="package com.sistema.model;&#10;&#10;public interface Estocavel {&#10;    void adicionarEstoque(int quantidade);&#10;    void removerEstoque(int quantidade);&#10;    int getQuantidadeEstoque();&#10;    boolean temEstoque(int quantidade);&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Interface Estocavel: define o contrato para produtos que podem ser estocados&#13;&#10;package com.sistema.model;&#13;&#10;&#13;&#10;// Uma interface em Java funciona como um conjunto de regras que as classes devem seguir.&#13;&#10;// Qualquer classe que &quot;implements Estocavel&quot; precisa fornecer a lógica para controlar o estoque.&#13;&#10;public interface Estocavel {&#13;&#10;    // Método para adicionar uma quantidade ao estoque do produto&#13;&#10;    void adicionarEstoque(int quantidade);&#13;&#10;    // Método para remover uma quantidade do estoque do produto&#13;&#10;    void removerEstoque(int quantidade);&#13;&#10;    // Método para consultar a quantidade atual em estoque&#13;&#10;    int getQuantidadeEstoque();&#13;&#10;    // Método para verificar se há estoque suficiente para uma operação&#13;&#10;    boolean temEstoque(int quantidade);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/model/Humus.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/model/Humus.java" />
              <option name="originalContent" value="package com.sistema.model;&#10;&#10;public class Humus extends Produto implements Vendavel, Estocavel {&#10;    private String origem;&#10;    private double pesoEmbalagem;&#10;    private String composicaoNutricional;&#10;    private int quantidadeEstoque;&#10;&#10;    public Humus(String id, String nome, double preco, String descricao, String origem, double pesoEmbalagem, String composicaoNutricional) {&#10;        super(id, nome, preco, descricao);&#10;        this.origem = origem;&#10;        this.pesoEmbalagem = pesoEmbalagem;&#10;        this.composicaoNutricional = composicaoNutricional;&#10;        this.quantidadeEstoque = 0;&#10;    }&#10;&#10;    public String getOrigem() {&#10;        return origem;&#10;    }&#10;&#10;    public double getPesoEmbalagem() {&#10;        return pesoEmbalagem;&#10;    }&#10;&#10;    public String getComposicaoNutricional() {&#10;        return composicaoNutricional;&#10;    }&#10;&#10;    public void setOrigem(String origem) {&#10;        this.origem = origem;&#10;    }&#10;&#10;    public void setPesoEmbalagem(double pesoEmbalagem) {&#10;        this.pesoEmbalagem = pesoEmbalagem;&#10;    }&#10;&#10;    public void setComposicaoNutricional(String composicaoNutricional) {&#10;        this.composicaoNutricional = composicaoNutricional;&#10;    }&#10;&#10;    @Override&#10;    public void exibirDetalhes() {&#10;        System.out.println(&quot;Húmus: &quot; + getNome());&#10;        System.out.println(&quot;Origem: &quot; + origem);&#10;        System.out.println(&quot;Peso da Embalagem: &quot; + pesoEmbalagem + &quot; kg&quot;);&#10;        System.out.println(&quot;Composição Nutricional: &quot; + composicaoNutricional);&#10;        System.out.println(&quot;Preço: R$ &quot; + getPreco());&#10;        System.out.println(&quot;Estoque: &quot; + quantidadeEstoque);&#10;    }&#10;&#10;    @Override&#10;    public double calcularPrecoFinal() {&#10;        return getPreco() * 1.1;&#10;    }&#10;&#10;    @Override&#10;    public void vender(int quantidade) {&#10;        if (podeVender(quantidade)) {&#10;            removerEstoque(quantidade);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean podeVender(int quantidade) {&#10;        return temEstoque(quantidade);&#10;    }&#10;&#10;    @Override&#10;    public double calcularValorVenda(int quantidade) {&#10;        return calcularPrecoFinal() * quantidade;&#10;    }&#10;&#10;    @Override&#10;    public void adicionarEstoque(int quantidade) {&#10;        this.quantidadeEstoque += quantidade;&#10;    }&#10;&#10;    @Override&#10;    public void removerEstoque(int quantidade) {&#10;        if (quantidade &lt;= quantidadeEstoque) {&#10;            this.quantidadeEstoque -= quantidade;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getQuantidadeEstoque() {&#10;        return quantidadeEstoque;&#10;    }&#10;&#10;    @Override&#10;    public boolean temEstoque(int quantidade) {&#10;        return quantidadeEstoque &gt;= quantidade;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Classe Humus: representa um tipo de produto orgânico, herda de Produto e implementa Vendavel e Estocavel&#10;package com.sistema.model;&#10;&#10;// Aqui estamos criando uma classe chamada Humus, que representa um produto orgânico no sistema.&#10;// Ela herda de Produto (ou seja, é um tipo de produto) e implementa as interfaces Vendavel e Estocavel,&#10;// o que significa que pode ser vendida e estocada.&#10;public class Humus extends Produto implements Vendavel, Estocavel {&#10;    // Origem do humus (ex: minhoca, composto)&#10;    private String origem;&#10;    // Peso da embalagem do humus, em quilos&#10;    private double pesoEmbalagem;&#10;    // Composição nutricional do humus&#10;    private String composicaoNutricional;&#10;    // Quantidade disponível no estoque&#10;    private int quantidadeEstoque;&#10;&#10;    // Construtor: inicializa todos os dados do humus&#10;    public Humus(String id, String nome, double preco, String descricao, String origem, double pesoEmbalagem, String composicaoNutricional) {&#10;        super(id, nome, preco, descricao); // Chama o construtor da classe Produto&#10;        this.origem = origem;&#10;        this.pesoEmbalagem = pesoEmbalagem;&#10;        this.composicaoNutricional = composicaoNutricional;&#10;        this.quantidadeEstoque = 0; // Começa com estoque zero&#10;    }&#10;&#10;    // Métodos getters: permitem acessar os dados privados do humus&#10;    public String getOrigem() {&#10;        return origem;&#10;    }&#10;&#10;    public double getPesoEmbalagem() {&#10;        return pesoEmbalagem;&#10;    }&#10;&#10;    public String getComposicaoNutricional() {&#10;        return composicaoNutricional;&#10;    }&#10;&#10;    // Métodos setters: permitem alterar os dados privados do humus&#10;    public void setOrigem(String origem) {&#10;        this.origem = origem;&#10;    }&#10;&#10;    public void setPesoEmbalagem(double pesoEmbalagem) {&#10;        this.pesoEmbalagem = pesoEmbalagem;&#10;    }&#10;&#10;    public void setComposicaoNutricional(String composicaoNutricional) {&#10;        this.composicaoNutricional = composicaoNutricional;&#10;    }&#10;&#10;    // Método sobrescrito para exibir os detalhes do humus&#10;    @Override&#10;    public void exibirDetalhes() {&#10;        System.out.println(&quot;Húmus: &quot; + getNome());&#10;        System.out.println(&quot;Origem: &quot; + origem);&#10;        System.out.println(&quot;Peso da Embalagem: &quot; + pesoEmbalagem + &quot; kg&quot;);&#10;        System.out.println(&quot;Composição Nutricional: &quot; + composicaoNutricional);&#10;        System.out.println(&quot;Preço: R$ &quot; + getPreco());&#10;        System.out.println(&quot;Estoque: &quot; + quantidadeEstoque);&#10;    }&#10;&#10;    @Override&#10;    public double calcularPrecoFinal() {&#10;        return getPreco() * 1.1;&#10;    }&#10;&#10;    @Override&#10;    public void vender(int quantidade) {&#10;        if (podeVender(quantidade)) {&#10;            removerEstoque(quantidade);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean podeVender(int quantidade) {&#10;        return temEstoque(quantidade);&#10;    }&#10;&#10;    @Override&#10;    public double calcularValorVenda(int quantidade) {&#10;        return calcularPrecoFinal() * quantidade;&#10;    }&#10;&#10;    @Override&#10;    public void adicionarEstoque(int quantidade) {&#10;        this.quantidadeEstoque += quantidade;&#10;    }&#10;&#10;    @Override&#10;    public void removerEstoque(int quantidade) {&#10;        if (quantidade &lt;= quantidadeEstoque) {&#10;            this.quantidadeEstoque -= quantidade;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getQuantidadeEstoque() {&#10;        return quantidadeEstoque;&#10;    }&#10;&#10;    @Override&#10;    public boolean temEstoque(int quantidade) {&#10;        return quantidadeEstoque &gt;= quantidade;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/model/Muda.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/model/Muda.java" />
              <option name="originalContent" value="package com.sistema.model;&#10;&#10;public class Muda extends Produto implements Vendavel, Estocavel {&#10;    private String especie;&#10;    private int tempoMaturacao;&#10;    private String tipoSolo;&#10;    private int quantidadeEstoque;&#10;&#10;    public Muda(String id, String nome, double preco, String descricao, String especie, int tempoMaturacao, String tipoSolo) {&#10;        super(id, nome, preco, descricao);&#10;        this.especie = especie;&#10;        this.tempoMaturacao = tempoMaturacao;&#10;        this.tipoSolo = tipoSolo;&#10;        this.quantidadeEstoque = 0;&#10;    }&#10;&#10;    public String getEspecie() {&#10;        return especie;&#10;    }&#10;&#10;    public int getTempoMaturacao() {&#10;        return tempoMaturacao;&#10;    }&#10;&#10;    public String getTipoSolo() {&#10;        return tipoSolo;&#10;    }&#10;&#10;    public void setEspecie(String especie) {&#10;        this.especie = especie;&#10;    }&#10;&#10;    public void setTempoMaturacao(int tempoMaturacao) {&#10;        this.tempoMaturacao = tempoMaturacao;&#10;    }&#10;&#10;    public void setTipoSolo(String tipoSolo) {&#10;        this.tipoSolo = tipoSolo;&#10;    }&#10;&#10;    @Override&#10;    public void exibirDetalhes() {&#10;        System.out.println(&quot;Muda: &quot; + getNome());&#10;        System.out.println(&quot;Espécie: &quot; + especie);&#10;        System.out.println(&quot;Tempo de Maturação: &quot; + tempoMaturacao + &quot; dias&quot;);&#10;        System.out.println(&quot;Tipo de Solo: &quot; + tipoSolo);&#10;        System.out.println(&quot;Preço: R$ &quot; + getPreco());&#10;        System.out.println(&quot;Estoque: &quot; + quantidadeEstoque);&#10;    }&#10;&#10;    @Override&#10;    public double calcularPrecoFinal() {&#10;        return getPreco();&#10;    }&#10;&#10;    @Override&#10;    public void vender(int quantidade) {&#10;        if (podeVender(quantidade)) {&#10;            removerEstoque(quantidade);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean podeVender(int quantidade) {&#10;        return temEstoque(quantidade);&#10;    }&#10;&#10;    @Override&#10;    public double calcularValorVenda(int quantidade) {&#10;        return getPreco() * quantidade;&#10;    }&#10;&#10;    @Override&#10;    public void adicionarEstoque(int quantidade) {&#10;        this.quantidadeEstoque += quantidade;&#10;    }&#10;&#10;    @Override&#10;    public void removerEstoque(int quantidade) {&#10;        if (quantidade &lt;= quantidadeEstoque) {&#10;            this.quantidadeEstoque -= quantidade;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getQuantidadeEstoque() {&#10;        return quantidadeEstoque;&#10;    }&#10;&#10;    @Override&#10;    public boolean temEstoque(int quantidade) {&#10;        return quantidadeEstoque &gt;= quantidade;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Classe Muda: representa uma muda de planta, herda de Produto e implementa Vendavel e Estocavel&#10;package com.sistema.model;&#10;&#10;// Aqui estamos criando uma classe chamada Muda, que representa uma muda de planta no sistema.&#10;// Ela herda de Produto (ou seja, é um tipo de produto) e implementa as interfaces Vendavel e Estocavel,&#10;// o que significa que pode ser vendida e estocada.&#10;public class Muda extends Produto implements Vendavel, Estocavel {&#10;    // Atributo que guarda a espécie da muda&#10;    private String especie;&#10;    // Tempo de maturação da muda, em dias&#10;    private int tempoMaturacao;&#10;    // Tipo de solo ideal para a muda&#10;    private String tipoSolo;&#10;    // Quantidade disponível no estoque&#10;    private int quantidadeEstoque;&#10;&#10;    // Construtor: inicializa todos os dados da muda&#10;    public Muda(String id, String nome, double preco, String descricao, String especie, int tempoMaturacao, String tipoSolo) {&#10;        super(id, nome, preco, descricao); // Chama o construtor da classe Produto&#10;        this.especie = especie;&#10;        this.tempoMaturacao = tempoMaturacao;&#10;        this.tipoSolo = tipoSolo;&#10;        this.quantidadeEstoque = 0; // Começa com estoque zero&#10;    }&#10;&#10;    // Métodos getters: permitem acessar os dados privados da muda&#10;    public String getEspecie() {&#10;        return especie;&#10;    }&#10;&#10;    public int getTempoMaturacao() {&#10;        return tempoMaturacao;&#10;    }&#10;&#10;    public String getTipoSolo() {&#10;        return tipoSolo;&#10;    }&#10;&#10;    // Métodos setters: permitem alterar os dados privados da muda&#10;    public void setEspecie(String especie) {&#10;        this.especie = especie;&#10;    }&#10;&#10;    public void setTempoMaturacao(int tempoMaturacao) {&#10;        this.tempoMaturacao = tempoMaturacao;&#10;    }&#10;&#10;    public void setTipoSolo(String tipoSolo) {&#10;        this.tipoSolo = tipoSolo;&#10;    }&#10;&#10;    // Método sobrescrito para exibir os detalhes da muda&#10;    @Override&#10;    public void exibirDetalhes() {&#10;        System.out.println(&quot;Muda: &quot; + getNome());&#10;        System.out.println(&quot;Espécie: &quot; + especie);&#10;        System.out.println(&quot;Tempo de Maturação: &quot; + tempoMaturacao + &quot; dias&quot;);&#10;        System.out.println(&quot;Tipo de Solo: &quot; + tipoSolo);&#10;        System.out.println(&quot;Preço: R$ &quot; + getPreco());&#10;        System.out.println(&quot;Estoque: &quot; + quantidadeEstoque);&#10;    }&#10;&#10;    @Override&#10;    public double calcularPrecoFinal() {&#10;        return getPreco();&#10;    }&#10;&#10;    @Override&#10;    public void vender(int quantidade) {&#10;        if (podeVender(quantidade)) {&#10;            removerEstoque(quantidade);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public boolean podeVender(int quantidade) {&#10;        return temEstoque(quantidade);&#10;    }&#10;&#10;    @Override&#10;    public double calcularValorVenda(int quantidade) {&#10;        return getPreco() * quantidade;&#10;    }&#10;&#10;    @Override&#10;    public void adicionarEstoque(int quantidade) {&#10;        this.quantidadeEstoque += quantidade;&#10;    }&#10;&#10;    @Override&#10;    public void removerEstoque(int quantidade) {&#10;        if (quantidade &lt;= quantidadeEstoque) {&#10;            this.quantidadeEstoque -= quantidade;&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public int getQuantidadeEstoque() {&#10;        return quantidadeEstoque;&#10;    }&#10;&#10;    @Override&#10;    public boolean temEstoque(int quantidade) {&#10;        return quantidadeEstoque &gt;= quantidade;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/model/Produto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/model/Produto.java" />
              <option name="originalContent" value="package com.sistema.model;&#10;&#10;public abstract class Produto {&#10;    private String id;&#10;    private String nome;&#10;    private double preco;&#10;    private String descricao;&#10;&#10;    public Produto(String id, String nome, double preco, String descricao) {&#10;        this.id = id;&#10;        this.nome = nome;&#10;        this.preco = preco;&#10;        this.descricao = descricao;&#10;    }&#10;&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getNome() {&#10;        return nome;&#10;    }&#10;&#10;    public double getPreco() {&#10;        return preco;&#10;    }&#10;&#10;    public String getDescricao() {&#10;        return descricao;&#10;    }&#10;&#10;    public void setNome(String nome) {&#10;        this.nome = nome;&#10;    }&#10;&#10;    public void setPreco(double preco) {&#10;        this.preco = preco;&#10;    }&#10;&#10;    public void setDescricao(String descricao) {&#10;        this.descricao = descricao;&#10;    }&#10;&#10;    public abstract void exibirDetalhes();&#10;    public abstract double calcularPrecoFinal();&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Classe abstrata Produto: serve como base para todos os tipos de produtos do sistema&#10;package com.sistema.model;&#10;&#10;// Uma classe abstrata não pode ser instanciada diretamente. Ela existe para ser herdada por outras classes específicas de produto.&#10;public abstract class Produto {&#10;    // Identificador único do produto&#10;    private String id;&#10;    // Nome do produto&#10;    private String nome;&#10;    // Preço base do produto&#10;    private double preco;&#10;    // Descrição do produto&#10;    private String descricao;&#10;&#10;    // Construtor: inicializa os dados do produto&#10;    public Produto(String id, String nome, double preco, String descricao) {&#10;        this.id = id;&#10;        this.nome = nome;&#10;        this.preco = preco;&#10;        this.descricao = descricao;&#10;    }&#10;&#10;    // Métodos getters: permitem acessar os dados privados do produto&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getNome() {&#10;        return nome;&#10;    }&#10;&#10;    public double getPreco() {&#10;        return preco;&#10;    }&#10;&#10;    public String getDescricao() {&#10;        return descricao;&#10;    }&#10;&#10;    // Métodos setters: permitem alterar os dados privados do produto&#10;    public void setNome(String nome) {&#10;        this.nome = nome;&#10;    }&#10;&#10;    public void setPreco(double preco) {&#10;        this.preco = preco;&#10;    }&#10;&#10;    public void setDescricao(String descricao) {&#10;        this.descricao = descricao;&#10;    }&#10;&#10;    // Método abstrato: obriga as subclasses a implementar a exibição dos detalhes do produto&#10;    public abstract void exibirDetalhes();&#10;    // Método abstrato: obriga as subclasses a implementar o cálculo do preço final do produto&#10;    public abstract double calcularPrecoFinal();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/model/Usuario.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/model/Usuario.java" />
              <option name="originalContent" value="package com.sistema.model;&#10;&#10;public abstract class Usuario {&#10;    private String id;&#10;    private String nome;&#10;    private String email;&#10;    private String senha;&#10;&#10;    public Usuario(String id, String nome, String email, String senha) {&#10;        this.id = id;&#10;        this.nome = nome;&#10;        this.email = email;&#10;        this.senha = senha;&#10;    }&#10;&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getNome() {&#10;        return nome;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public String getSenha() {&#10;        return senha;&#10;    }&#10;&#10;    public void setNome(String nome) {&#10;        this.nome = nome;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public void setSenha(String senha) {&#10;        this.senha = senha;&#10;    }&#10;&#10;    public abstract void exibirDetalhes();&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="// Classe abstrata Usuario: serve como base para todos os tipos de usuários do sistema&#10;package com.sistema.model;&#10;&#10;// Uma classe abstrata não pode ser instanciada diretamente, ou seja, não podemos criar um &quot;Usuario&quot; genérico.&#10;// Ela existe para ser herdada por outras classes, como Administrador, Vendedor e Cliente.&#10;public abstract class Usuario {&#10;    // Identificador único do usuário&#10;    private String id;&#10;    // Nome do usuário&#10;    private String nome;&#10;    // Email do usuário (usado para login e contato)&#10;    private String email;&#10;    // Senha do usuário (usada para autenticação)&#10;    private String senha;&#10;&#10;    // Construtor: inicializa os dados do usuário&#10;    public Usuario(String id, String nome, String email, String senha) {&#10;        this.id = id;&#10;        this.nome = nome;&#10;        this.email = email;&#10;        this.senha = senha;&#10;    }&#10;&#10;    // Métodos getters: permitem acessar os dados privados do usuário&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getNome() {&#10;        return nome;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public String getSenha() {&#10;        return senha;&#10;    }&#10;&#10;    // Métodos setters: permitem alterar os dados privados do usuário&#10;    public void setNome(String nome) {&#10;        this.nome = nome;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public void setSenha(String senha) {&#10;        this.senha = senha;&#10;    }&#10;&#10;    // Método abstrato: obriga as subclasses a implementar a exibição dos detalhes do usuário&#10;    public abstract void exibirDetalhes();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/model/Vendavel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/model/Vendavel.java" />
              <option name="originalContent" value="package com.sistema.model;&#10;&#10;public interface Vendavel {&#10;    void vender(int quantidade);&#10;    boolean podeVender(int quantidade);&#10;    double calcularValorVenda(int quantidade);&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Interface Vendavel: define o contrato para produtos que podem ser vendidos&#13;&#10;package com.sistema.model;&#13;&#10;&#13;&#10;// Uma interface em Java é como um conjunto de regras que as classes devem seguir.&#13;&#10;// Aqui, qualquer classe que &quot;implements Vendavel&quot; precisa fornecer a lógica para vender produtos.&#13;&#10;public interface Vendavel {&#13;&#10;    // Método para realizar a venda de uma quantidade do produto&#13;&#10;    void vender(int quantidade);&#13;&#10;    // Método para verificar se é possível vender uma quantidade do produto (ex: se tem estoque suficiente)&#13;&#10;    boolean podeVender(int quantidade);&#13;&#10;    // Método para calcular o valor total da venda de uma quantidade do produto&#13;&#10;    double calcularValorVenda(int quantidade);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/model/Vendedor.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/model/Vendedor.java" />
              <option name="originalContent" value="package com.sistema.model;&#10;&#10;public class Vendedor extends Usuario {&#10;    private double comissao;&#10;    private double totalVendas;&#10;&#10;    public Vendedor(String id, String nome, String email, String senha, double comissao) {&#10;        super(id, nome, email, senha);&#10;        this.comissao = comissao;&#10;        this.totalVendas = 0.0;&#10;    }&#10;&#10;    public double getComissao() {&#10;        return comissao;&#10;    }&#10;&#10;    public double getTotalVendas() {&#10;        return totalVendas;&#10;    }&#10;&#10;    public void setComissao(double comissao) {&#10;        this.comissao = comissao;&#10;    }&#10;&#10;    public void adicionarVenda(double valor) {&#10;        this.totalVendas += valor;&#10;    }&#10;&#10;    public double calcularComissaoTotal() {&#10;        return totalVendas * (comissao / 100);&#10;    }&#10;&#10;    @Override&#10;    public void exibirDetalhes() {&#10;        System.out.println(&quot;Vendedor: &quot; + getNome());&#10;        System.out.println(&quot;Email: &quot; + getEmail());&#10;        System.out.println(&quot;Comissão: &quot; + comissao + &quot;%&quot;);&#10;        System.out.println(&quot;Total de Vendas: R$ &quot; + totalVendas);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Classe Vendedor: representa um vendedor no sistema, herda de Usuario&#10;package com.sistema.model;&#10;&#10;public class Vendedor extends Usuario {&#10;    // Porcentagem de comissão que o vendedor recebe sobre as vendas&#10;    private double comissao;&#10;    // Valor total das vendas realizadas pelo vendedor&#10;    private double totalVendas;&#10;&#10;    // Construtor: inicializa os dados do vendedor&#10;    public Vendedor(String id, String nome, String email, String senha, double comissao) {&#10;        super(id, nome, email, senha); // Chama o construtor da classe Usuario&#10;        this.comissao = comissao; // Define a comissão&#10;        this.totalVendas = 0.0; // Inicializa o total de vendas como zero&#10;    }&#10;&#10;    // Retorna a porcentagem de comissão do vendedor&#10;    public double getComissao() {&#10;        return comissao;&#10;    }&#10;&#10;    // Retorna o valor total das vendas realizadas&#10;    public double getTotalVendas() {&#10;        return totalVendas;&#10;    }&#10;&#10;    // Permite alterar a porcentagem de comissão do vendedor&#10;    public void setComissao(double comissao) {&#10;        this.comissao = comissao;&#10;    }&#10;&#10;    // Adiciona o valor de uma venda ao total de vendas do vendedor&#10;    public void adicionarVenda(double valor) {&#10;        this.totalVendas += valor;&#10;    }&#10;&#10;    // Calcula o valor total de comissão que o vendedor deve receber&#10;    public double calcularComissaoTotal() {&#10;        return totalVendas * (comissao / 100);&#10;    }&#10;&#10;    // Exibe os detalhes do vendedor na tela&#10;    @Override&#10;    public void exibirDetalhes() {&#10;        System.out.println(&quot;Vendedor: &quot; + getNome());&#10;        System.out.println(&quot;Email: &quot; + getEmail());&#10;        System.out.println(&quot;Comissão: &quot; + comissao + &quot;%&quot;);&#10;        System.out.println(&quot;Total de Vendas: R$ &quot; + totalVendas);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/service/Controlador.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/service/Controlador.java" />
              <option name="originalContent" value="package com.sistema.service;&#10;&#10;import com.sistema.model.*;&#10;import com.sistema.util.Util;&#10;&#10;import java.util.List;&#10;&#10;public class Controlador {&#10;    private static Controlador instance;&#10;    private Estoque estoque;&#10;&#10;    private Controlador() {&#10;        this.estoque = Estoque.getInstance();&#10;    }&#10;&#10;    public static Controlador getInstance() {&#10;        if (instance == null) {&#10;            instance = new Controlador();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    public void realizarVenda(Cliente cliente, Produto produto, int quantidade, Vendedor vendedor) {&#10;        if (produto instanceof Vendavel) {&#10;            Vendavel produtoVendavel = (Vendavel) produto;&#10;            if (produtoVendavel.podeVender(quantidade)) {&#10;                double valorVenda = produtoVendavel.calcularValorVenda(quantidade);&#10;                produtoVendavel.vender(quantidade);&#10;                vendedor.adicionarVenda(valorVenda);&#10;                System.out.println(&quot;\nVenda realizada com sucesso!&quot;);&#10;                System.out.println(&quot;Cliente: &quot; + cliente.getNome());&#10;                System.out.println(&quot;Produto: &quot; + produto.getNome());&#10;                System.out.println(&quot;Quantidade: &quot; + quantidade);&#10;                System.out.println(&quot;Valor Total: R$ &quot; + Util.formatarValor(valorVenda));&#10;                System.out.println(&quot;Vendedor: &quot; + vendedor.getNome());&#10;            } else {&#10;                System.out.println(&quot;Não é possível realizar a venda. Estoque insuficiente.&quot;);&#10;            }&#10;        } else {&#10;            System.out.println(&quot;Produto não é vendável.&quot;);&#10;        }&#10;    }&#10;&#10;    public void adicionarProdutoEstoque(Produto produto, int quantidade) {&#10;        estoque.adicionarProduto(produto, quantidade);&#10;    }&#10;&#10;    public void removerProdutoEstoque(Produto produto, int quantidade) {&#10;        estoque.removerProduto(produto, quantidade);&#10;    }&#10;&#10;    public Produto buscarProduto(String id) {&#10;        return estoque.buscarProdutoPorId(id);&#10;    }&#10;&#10;    public void gerarRelatorioEstoque() {&#10;        System.out.println(&quot;\n=== RELATÓRIO DE ESTOQUE ===&quot;);&#10;        estoque.listarProdutosEmEstoque();&#10;    }&#10;&#10;    public void gerarRelatorioVendedor(Vendedor vendedor) {&#10;        System.out.println(&quot;\n=== RELATÓRIO DO VENDEDOR ===&quot;);&#10;        vendedor.exibirDetalhes();&#10;        System.out.println(&quot;Comissão Total: R$ &quot; + Util.formatarValor(vendedor.calcularComissaoTotal()));&#10;        System.out.println(&quot;=============================&quot;);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Classe Controlador: responsável por gerenciar operações do sistema, como vendas&#10;package com.sistema.service;&#10;&#10;import com.sistema.model.*;&#10;import com.sistema.util.Util;&#10;&#10;import java.util.List;&#10;&#10;public class Controlador {&#10;    // Instância única da classe (padrão Singleton)&#10;    private static Controlador instance;&#10;    // Referência ao estoque do sistema&#10;    private Estoque estoque;&#10;&#10;    // Construtor privado para garantir o padrão Singleton&#10;    private Controlador() {&#10;        this.estoque = Estoque.getInstance(); // Obtém a instância do estoque&#10;    }&#10;&#10;    // Método estático para obter a instância única do controlador&#10;    public static Controlador getInstance() {&#10;        if (instance == null) {&#10;            instance = new Controlador(); // Cria a instância se ainda não existe&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    // Método para realizar uma venda&#10;    // Recebe o cliente, produto, quantidade e vendedor&#10;    public void realizarVenda(Cliente cliente, Produto produto, int quantidade, Vendedor vendedor) {&#10;        // Verifica se o produto pode ser vendido (implementa Vendavel)&#10;        if (produto instanceof Vendavel) {&#10;            Vendavel produtoVendavel = (Vendavel) produto;&#10;            // Verifica se há estoque suficiente para a venda&#10;            if (produtoVendavel.podeVender(quantidade)) {&#10;                double valorVenda = produtoVendavel.calcularValorVenda(quantidade); // Calcula o valor total&#10;                produtoVendavel.vender(quantidade); // Realiza a venda (atualiza estoque)&#10;                vendedor.adicionarVenda(valorVenda); // Adiciona o valor à comissão do vendedor&#10;                System.out.println(&quot;\nVenda realizada com sucesso!&quot;);&#10;                System.out.println(&quot;Cliente: &quot; + cliente.getNome());&#10;                System.out.println(&quot;Produto: &quot; + produto.getNome());&#10;                System.out.println(&quot;Quantidade: &quot; + quantidade);&#10;                System.out.println(&quot;Valor Total: R$ &quot; + Util.formatarValor(valorVenda));&#10;                System.out.println(&quot;Vendedor: &quot; + vendedor.getNome());&#10;            } else {&#10;                System.out.println(&quot;Não é possível realizar a venda. Estoque insuficiente.&quot;);&#10;            }&#10;        } else {&#10;            System.out.println(&quot;Produto não é vendável.&quot;);&#10;        }&#10;    }&#10;&#10;    public void adicionarProdutoEstoque(Produto produto, int quantidade) {&#10;        estoque.adicionarProduto(produto, quantidade);&#10;    }&#10;&#10;    public void removerProdutoEstoque(Produto produto, int quantidade) {&#10;        estoque.removerProduto(produto, quantidade);&#10;    }&#10;&#10;    public Produto buscarProduto(String id) {&#10;        return estoque.buscarProdutoPorId(id);&#10;    }&#10;&#10;    public void gerarRelatorioEstoque() {&#10;        System.out.println(&quot;\n=== RELATÓRIO DE ESTOQUE ===&quot;);&#10;        estoque.listarProdutosEmEstoque();&#10;    }&#10;&#10;    public void gerarRelatorioVendedor(Vendedor vendedor) {&#10;        System.out.println(&quot;\n=== RELATÓRIO DO VENDEDOR ===&quot;);&#10;        vendedor.exibirDetalhes();&#10;        System.out.println(&quot;Comissão Total: R$ &quot; + Util.formatarValor(vendedor.calcularComissaoTotal()));&#10;        System.out.println(&quot;=============================&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/service/Estoque.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/service/Estoque.java" />
              <option name="originalContent" value="package com.sistema.service;&#10;&#10;import com.sistema.model.Estocavel;&#10;import com.sistema.model.Produto;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class Estoque {&#10;    private static Estoque instance;&#10;    private List&lt;Produto&gt; produtosEmEstoque;&#10;&#10;    private Estoque() {&#10;        this.produtosEmEstoque = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    public static Estoque getInstance() {&#10;        if (instance == null) {&#10;            instance = new Estoque();&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    public void adicionarProduto(Produto produto, int quantidade) {&#10;        if (produto instanceof Estocavel) {&#10;            ((Estocavel) produto).adicionarEstoque(quantidade);&#10;            if (!produtosEmEstoque.contains(produto)) {&#10;                produtosEmEstoque.add(produto);&#10;            }&#10;            System.out.println(&quot;Adicionado &quot; + quantidade + &quot; unidades de &quot; + produto.getNome() + &quot; ao estoque.&quot;);&#10;        } else {&#10;            System.out.println(&quot;Produto &quot; + produto.getNome() + &quot; não é estocável.&quot;);&#10;        }&#10;    }&#10;&#10;    public void removerProduto(Produto produto, int quantidade) {&#10;        if (produto instanceof Estocavel) {&#10;            if (((Estocavel) produto).temEstoque(quantidade)) {&#10;                ((Estocavel) produto).removerEstoque(quantidade);&#10;                System.out.println(&quot;Removido &quot; + quantidade + &quot; unidades de &quot; + produto.getNome() + &quot; do estoque.&quot;);&#10;            } else {&#10;                System.out.println(&quot;Estoque insuficiente para &quot; + produto.getNome() + &quot;.&quot;);&#10;            }&#10;        } else {&#10;            System.out.println(&quot;Produto &quot; + produto.getNome() + &quot; não é estocável.&quot;);&#10;        }&#10;    }&#10;&#10;    public Produto buscarProdutoPorId(String id) {&#10;        Optional&lt;Produto&gt; produtoEncontrado = produtosEmEstoque.stream()&#10;                .filter(p -&gt; p.getId().equals(id))&#10;                .findFirst();&#10;        return produtoEncontrado.orElse(null);&#10;    }&#10;&#10;    public void listarProdutosEmEstoque() {&#10;        if (produtosEmEstoque.isEmpty()) {&#10;            System.out.println(&quot;Estoque vazio.&quot;);&#10;            return;&#10;        }&#10;        System.out.println(&quot;\n--- Produtos em Estoque ---&quot;);&#10;        for (Produto produto : produtosEmEstoque) {&#10;            if (produto instanceof Estocavel) {&#10;                System.out.println(produto.getNome() + &quot; (ID: &quot; + produto.getId() + &quot;) - Quantidade: &quot; + ((Estocavel) produto).getQuantidadeEstoque());&#10;            }&#10;        }&#10;        System.out.println(&quot;---------------------------&quot;);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Classe Estoque: gerencia os produtos armazenados e suas quantidades&#10;package com.sistema.service;&#10;&#10;import com.sistema.model.Estocavel;&#10;import com.sistema.model.Produto;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class Estoque {&#10;    // Instância única da classe Estoque (padrão Singleton)&#10;    private static Estoque instance;&#10;    // Lista que armazena todos os produtos presentes no estoque&#10;    private List&lt;Produto&gt; produtosEmEstoque;&#10;&#10;    // Construtor privado para garantir o padrão Singleton&#10;    private Estoque() {&#10;        this.produtosEmEstoque = new ArrayList&lt;&gt;(); // Inicializa a lista de produtos em estoque&#10;    }&#10;&#10;    // Método estático para obter a instância única do estoque&#10;    public static Estoque getInstance() {&#10;        if (instance == null) {&#10;            instance = new Estoque(); // Cria a instância se ainda não existe&#10;        }&#10;        return instance;&#10;    }&#10;&#10;    // Método para adicionar produtos ao estoque&#10;    // Recebe o produto e a quantidade a ser adicionada&#10;    public void adicionarProduto(Produto produto, int quantidade) {&#10;        // Verifica se o produto pode ser estocado (implementa Estocavel)&#10;        if (produto instanceof Estocavel) {&#10;            ((Estocavel) produto).adicionarEstoque(quantidade); // Adiciona ao estoque do produto&#10;            if (!produtosEmEstoque.contains(produto)) {&#10;                produtosEmEstoque.add(produto); // Adiciona à lista se ainda não estiver&#10;            }&#10;            System.out.println(&quot;Adicionado &quot; + quantidade + &quot; unidades de &quot; + produto.getNome() + &quot; ao estoque.&quot;);&#10;        } else {&#10;            System.out.println(&quot;Produto &quot; + produto.getNome() + &quot; não é estocável.&quot;);&#10;        }&#10;    }&#10;&#10;    // Método para remover produtos do estoque&#10;    // Recebe o produto e a quantidade a ser removida&#10;    public void removerProduto(Produto produto, int quantidade) {&#10;        // Verifica se o produto pode ser estocado&#10;        if (produto instanceof Estocavel) {&#10;            if (((Estocavel) produto).temEstoque(quantidade)) {&#10;                ((Estocavel) produto).removerEstoque(quantidade);&#10;                System.out.println(&quot;Removido &quot; + quantidade + &quot; unidades de &quot; + produto.getNome() + &quot; do estoque.&quot;);&#10;            } else {&#10;                System.out.println(&quot;Estoque insuficiente para &quot; + produto.getNome() + &quot;.&quot;);&#10;            }&#10;        } else {&#10;            System.out.println(&quot;Produto &quot; + produto.getNome() + &quot; não é estocável.&quot;);&#10;        }&#10;    }&#10;&#10;    // Método para buscar um produto no estoque pelo seu ID&#10;    public Produto buscarProdutoPorId(String id) {&#10;        Optional&lt;Produto&gt; produtoEncontrado = produtosEmEstoque.stream()&#10;                .filter(p -&gt; p.getId().equals(id))&#10;                .findFirst();&#10;        return produtoEncontrado.orElse(null);&#10;    }&#10;&#10;    // Método para listar todos os produtos em estoque&#10;    public void listarProdutosEmEstoque() {&#10;        if (produtosEmEstoque.isEmpty()) {&#10;            System.out.println(&quot;Estoque vazio.&quot;);&#10;            return;&#10;        }&#10;        System.out.println(&quot;\n--- Produtos em Estoque ---&quot;);&#10;        for (Produto produto : produtosEmEstoque) {&#10;            if (produto instanceof Estocavel) {&#10;                System.out.println(produto.getNome() + &quot; (ID: &quot; + produto.getId() + &quot;) - Quantidade: &quot; + ((Estocavel) produto).getQuantidadeEstoque());&#10;            }&#10;        }&#10;        System.out.println(&quot;---------------------------&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sistema/util/Util.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sistema/util/Util.java" />
              <option name="originalContent" value="package com.sistema.util;&#10;&#10;import java.text.DecimalFormat;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;&#10;public class Util {&#10;&#10;    private static int nextId = 1;&#10;&#10;    public static String formatarData(LocalDate data) {&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;        return data.format(formatter);&#10;    }&#10;&#10;    public static String formatarValor(double valor) {&#10;        DecimalFormat df = new DecimalFormat(&quot;#,##0.00&quot;);&#10;        return df.format(valor);&#10;    }&#10;&#10;    public static boolean validarCPF(String cpf) {&#10;        // Simplificação: apenas verifica se tem 11 dígitos e são todos números&#10;        return cpf != null &amp;&amp; cpf.matches(&quot;\\d{11}&quot;);&#10;    }&#10;&#10;    public static boolean validarEmail(String email) {&#10;        // Simplificação: apenas verifica se contém '@' e '.'&#10;        return email != null &amp;&amp; email.contains(&quot;@&quot;) &amp;&amp; email.contains(&quot;.&quot;);&#10;    }&#10;&#10;    public static String gerarIdUnico() {&#10;        return String.valueOf(nextId++);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="// Classe Util: contém métodos utilitários para facilitar operações comuns no sistema&#10;package com.sistema.util;&#10;&#10;import java.text.DecimalFormat;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;&#10;public class Util {&#10;&#10;    // Variável estática para gerar IDs únicos&#10;    private static int nextId = 1;&#10;&#10;    // Método para formatar datas no padrão brasileiro (dd/MM/yyyy)&#10;    public static String formatarData(LocalDate data) {&#10;        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;dd/MM/yyyy&quot;);&#10;        return data.format(formatter); // Retorna a data formatada como String&#10;    }&#10;&#10;    // Método para formatar valores monetários com duas casas decimais&#10;    public static String formatarValor(double valor) {&#10;        DecimalFormat df = new DecimalFormat(&quot;#,##0.00&quot;);&#10;        return df.format(valor); // Retorna o valor formatado como String&#10;    }&#10;&#10;    // Método para validar CPF: verifica se tem 11 dígitos numéricos&#10;    public static boolean validarCPF(String cpf) {&#10;        // Simplificação: apenas verifica se tem 11 dígitos e são todos números&#10;        return cpf != null &amp;&amp; cpf.matches(&quot;\\d{11}&quot;);&#10;    }&#10;&#10;    // Método para validar e-mail: verifica se contém '@' e '.'&#10;    public static boolean validarEmail(String email) {&#10;        // Simplificação: apenas verifica se contém '@' e '.'&#10;        return email != null &amp;&amp; email.contains(&quot;@&quot;) &amp;&amp; email.contains(&quot;.&quot;);&#10;    }&#10;&#10;    // Método para gerar um ID único para objetos do sistema&#10;    public static String gerarIdUnico() {&#10;        return String.valueOf(nextId++); // Incrementa e retorna o próximo ID&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>